// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "finance"]
}

model User {
  id                  String   @id @default(uuid(7))
  email               String   @unique
  name                String
  password            String // Campo para autenticação
  passwordConfigured  Boolean  @default(false) // Indica se a senha foi configurada pelo usuário
  avatarUrl           String?
  role                UserRole @default(user) // Novo campo para perfil do usuário
  planId              String?  // Novo campo para plano do usuário
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relacionamentos
  accounts      Account[]
  creditCards   CreditCard[]
  categories    Category[]
  entries       Entry[]
  preferences   UserPreferences?
  providers     UserProvider[]
  refreshTokens RefreshToken[]
  plan          Plan?         @relation(fields: [planId], references: [id])
  coupons       UserCoupon[]  // Cupons utilizados pelo usuário

  @@map("users")
  @@schema("auth")
}

model UserProvider {
  id             String   @id @default(uuid(7))
  userId         String
  provider       String
  providerUserId String
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
  @@map("user_providers")
  @@schema("auth")
}

model RefreshToken {
  jti       String   @id
  userId    String
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
  @@schema("auth")
}

model Account {
  id                      String      @id @default(uuid(7))
  name                    String
  type                    AccountType
  icon                    String
  iconType                IconType    @default(generic)
  includeInGeneralBalance Boolean     @default(true)
  userId                  String
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt

  // Relacionamentos
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries            Entry[]
  creditCardPayments CreditCard[] @relation("DefaultPaymentAccount")

  @@map("accounts")
  @@schema("finance")
}

model CreditCard {
  id                      String   @id @default(uuid(7))
  name                    String
  icon                    String
  iconType                IconType @default(generic)
  limit                   Decimal  @db.Decimal(18, 2)
  closingDay              Int
  dueDay                  Int
  defaultPaymentAccountId String?
  userId                  String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relacionamentos
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  defaultPaymentAccount Account? @relation("DefaultPaymentAccount", fields: [defaultPaymentAccountId], references: [id])
  entries               Entry[]

  @@map("credit_cards")
  @@schema("finance")
}

model Category {
  id        String          @id @default(uuid(7))
  name      String
  color     String
  type      EntryType
  icon      String
  parentId  String?
  userId    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  // Relacionamentos
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  entries  Entry[]

  @@map("categories")
  @@schema("finance")
}

model Entry {
  id           String          @id @default(uuid(7))
  description  String
  amount       Decimal         @db.Decimal(18, 2)
  type         EntryType
  date         DateTime
  paid         Boolean         @default(false)
  categoryId   String
  accountId    String?
  creditCardId String?
  userId       String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relacionamentos
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category    @relation(fields: [categoryId], references: [id])
  account    Account?    @relation(fields: [accountId], references: [id])
  creditCard CreditCard? @relation(fields: [creditCardId], references: [id])

  @@map("entries")
  @@schema("finance")
}

model UserPreferences {
  id                         String           @id @default(uuid(7))
  entryOrder                EntryOrder       @default(descending)
  defaultNavigationPeriod    NavigationPeriod @default(monthly)
  showDailyBalance           Boolean          @default(false)
  viewMode                   ViewMode         @default(all)
  isFinancialSummaryExpanded Boolean          @default(false)
  userId                     String           @unique
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
  @@schema("auth")
}

// Enums
enum AccountType {
  bank
  investment
  cash
  other

  @@map("account_type")
  @@schema("finance")
}

enum IconType {
  bank
  generic

  @@map("icon_type")
  @@schema("finance")
}

enum EntryType {
  income
  expense

  @@map("entry_type")
  @@schema("finance")
}

enum EntryOrder {
  ascending
  descending

  @@map("entry_order")
  @@schema("auth")
}

enum NavigationPeriod {
  daily
  weekly
  monthly
  quarterly
  yearly

  @@map("navigation_period")
  @@schema("auth")
}

enum ViewMode {
  all
  cashflow

  @@map("view_mode")
  @@schema("auth")
}

enum UserRole {
  user
  admin

  @@map("user_role")
  @@schema("auth")
}

enum PlanType {
  free
  monthly
  annual

  @@map("plan_type")
  @@schema("auth")
}

// Modelo para planos de assinatura
model Plan {
  id          String   @id @default(uuid(7))
  name        String
  type        PlanType
  price       Decimal  @db.Decimal(10, 2)
  description String?
  features    Json     // Armazenar features como JSON
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  users User[]

  @@map("plans")
  @@schema("auth")
}

// Modelo para cupons de desconto
model Coupon {
  id           String     @id @default(uuid(7))
  code         String     @unique
  discountType String     // 'percentage' ou 'fixed'
  discountValue Decimal   @db.Decimal(10, 2)
  maxUses      Int?       // Número máximo de usos (null = ilimitado)
  currentUses  Int        @default(0)
  expiresAt    DateTime?  // Data de expiração (null = sem expiração)
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relacionamentos
  userCoupons UserCoupon[]

  @@map("coupons")
  @@schema("auth")
}

// Modelo para relacionar usuários com cupons utilizados
model UserCoupon {
  id       String   @id @default(uuid(7))
  userId   String
  couponId String
  usedAt   DateTime @default(now())

  // Relacionamentos
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@unique([userId, couponId])
  @@map("user_coupons")
  @@schema("auth")
}
