import { FastifyInstance } from 'fastify'
import { z } from 'zod'

import { ReportsFactory } from '@/factories/reports.factory'
import {
  accountsReportFiltersSchema,
  accountsReportResponseSchema,
  cashflowReportFiltersSchema,
  cashflowReportResponseSchema,
  categoriesReportFiltersSchema,
  categoriesReportResponseSchema,
} from '@/utils/schemas'

import { authMiddleware } from '../middleware/auth'

export async function reportRoutes(app: FastifyInstance) {
  const reportsController = ReportsFactory.getController()

  // GET /reports/categories - Relat√≥rio de categorias
  app.get(
    '/reports/categories',
    {
      schema: {
        tags: ['üìà Relat√≥rios'],
        summary: 'Relat√≥rio de Categorias',
        description: `
Gera relat√≥rio detalhado de transa√ß√µes agrupadas por categoria.

**Funcionalidades:**
- Agrupamento por categoria pai e subcategorias
- Filtros por per√≠odo, tipo (receita/despesa) e categoria espec√≠fica
- C√°lculo de percentuais e totais
- Hierarquia de categorias com subcategorias

**Exemplo de uso:**
- Relat√≥rio geral: Sem filtros
- Apenas despesas: \`type=expense\`
- Categoria espec√≠fica: \`categoryId=123\`
        `,
        querystring: categoriesReportFiltersSchema,
        response: {
          200: categoriesReportResponseSchema,
          401: z.object({ message: z.string() }),
          500: z.object({ error: z.string() }),
        },
        security: [{ bearerAuth: [] }],
      },
      preHandler: [authMiddleware],
    },
    reportsController.categories.bind(reportsController),
  )

  // GET /reports/cashflow - Relat√≥rio de fluxo de caixa
  app.get(
    '/reports/cashflow',
    {
      schema: {
        tags: ['üìà Relat√≥rios'],
        summary: 'Relat√≥rio de Fluxo de Caixa',
        description: `
Gera relat√≥rio de fluxo de caixa com agrupamento temporal.

**Agrupamentos dispon√≠veis:**
- **Di√°rio**: Dados agrupados por dia (DD/MM/AAAA)
- **Semanal**: Dados agrupados por semana (formato "28 Jun √† 14 Ago")
- **Mensal**: Dados agrupados por m√™s

**Filtros:**
- Per√≠odo de data (startDate/endDate em timestamp)
- Modo de visualiza√ß√£o (viewMode: daily/weekly/monthly)

**Exemplo de uso:**
- √öltimos 30 dias: \`startDate=1640995200&endDate=1643587200\`
- Agrupamento semanal: \`viewMode=weekly\`
        `,
        querystring: cashflowReportFiltersSchema,
        response: {
          200: cashflowReportResponseSchema,
          401: z.object({ message: z.string() }),
          500: z.object({ error: z.string() }),
        },
        security: [{ bearerAuth: [] }],
      },
      preHandler: [authMiddleware],
    },
    reportsController.cashflow.bind(reportsController),
  )

  // GET /reports/accounts - Relat√≥rio de contas e cart√µes
  app.get(
    '/reports/accounts',
    {
      schema: {
        tags: ['üìà Relat√≥rios'],
        summary: 'Relat√≥rio de Contas e Cart√µes',
        description: `
Gera relat√≥rio detalhado de transa√ß√µes por conta banc√°ria e cart√£o de cr√©dito.

**Filtros dispon√≠veis:**
- **all**: Todas as contas e cart√µes (padr√£o)
- **bank_accounts**: Apenas contas banc√°rias
- **credit_cards**: Apenas cart√µes de cr√©dito

**Informa√ß√µes retornadas:**
- Saldo, receitas e despesas por conta
- N√∫mero de transa√ß√µes
- Percentuais de participa√ß√£o
- Resumo consolidado

**Exemplo de uso:**
- Todas as contas: Sem filtro ou \`accountFilter=all\`
- Apenas contas banc√°rias: \`accountFilter=bank_accounts\`
- Apenas cart√µes: \`accountFilter=credit_cards\`
        `,
        querystring: accountsReportFiltersSchema,
        response: {
          200: accountsReportResponseSchema,
          401: z.object({ message: z.string() }),
          500: z.object({ error: z.string() }),
        },
        security: [{ bearerAuth: [] }],
      },
      preHandler: [authMiddleware],
    },
    reportsController.accounts.bind(reportsController),
  )
}
