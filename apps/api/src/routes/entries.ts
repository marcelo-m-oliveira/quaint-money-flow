import { FastifyInstance } from 'fastify'
import { z } from 'zod'

import { EntryFactory } from '@/factories/entry.factory'
import { performanceMiddleware } from '@/middleware/performance.middleware'
import { rateLimitMiddlewares } from '@/middleware/rate-limit.middleware'
import {
  entryCreateSchema,
  entryFiltersSchema,
  entryListResponseSchema,
  entryPatchSchema,
  entryResponseSchema,
  entryUpdateSchema,
  idParamSchema,
} from '@/utils/schemas'

import { authMiddleware } from '../middleware/auth.middleware'

export async function entryRoutes(app: FastifyInstance) {
  const entryController = EntryFactory.getController()

  // GET /entries - Listar transa√ß√µes do usu√°rio com filtros
  app.get(
    '/entries',
    {
      schema: {
        tags: ['üí∞ Transa√ß√µes'],
        summary: 'Listar Transa√ß√µes',
        description: `
Lista todas as transa√ß√µes do usu√°rio com filtros avan√ßados.

**Filtros dispon√≠veis:**
- **Per√≠odo**: startDate/endDate (timestamp)
- **Tipo**: income (receita) ou expense (despesa)
- **Categoria**: categoryId espec√≠fica
- **Conta**: accountId ou creditCardId
- **Valor**: minAmount/maxAmount
- **Descri√ß√£o**: search (busca textual)

**Ordena√ß√£o:**
- Padr√£o: data mais recente primeiro
- Personaliz√°vel por campo e dire√ß√£o

**Pagina√ß√£o:**
- page: n√∫mero da p√°gina (padr√£o: 1)
- limit: itens por p√°gina (padr√£o: 20)
        `,
        querystring: entryFiltersSchema,
        response: {
          200: entryListResponseSchema,
          401: z.object({ message: z.string() }),
          500: z.object({ error: z.string() }),
        },
        security: [{ bearerAuth: [] }],
      },
      preHandler: [
        authMiddleware,
        performanceMiddleware(),
        rateLimitMiddlewares.authenticated(),
      ],
    },
    entryController.index.bind(entryController),
  )

  // GET /entries/:id - Buscar transa√ß√£o espec√≠fica
  app.get(
    '/entries/:id',
    {
      schema: {
        tags: ['üí∞ Transa√ß√µes'],
        summary: 'Buscar Transa√ß√£o',
        description: 'Recupera uma transa√ß√£o espec√≠fica pelo ID.',
        params: idParamSchema,
        response: {
          200: entryResponseSchema,
          401: z.object({ message: z.string() }),
          404: z.object({ error: z.string() }),
          500: z.object({ error: z.string() }),
        },
        security: [{ bearerAuth: [] }],
      },
      preHandler: [
        authMiddleware,
        performanceMiddleware(),
        rateLimitMiddlewares.authenticated(),
      ],
    },
    entryController.show.bind(entryController),
  )

  // POST /entries - Criar nova transa√ß√£o
  app.post(
    '/entries',
    {
      schema: {
        tags: ['üí∞ Transa√ß√µes'],
        summary: 'Criar Transa√ß√£o',
        description: `
Cria uma nova transa√ß√£o financeira.

**Campos obrigat√≥rios:**
- amount: valor da transa√ß√£o
- type: income (receita) ou expense (despesa)
- date: data da transa√ß√£o
- categoryId: categoria da transa√ß√£o
- accountId OU creditCardId: conta ou cart√£o

**Campos opcionais:**
- description: descri√ß√£o detalhada
- tags: array de tags para organiza√ß√£o
        `,
        body: entryCreateSchema,
        response: {
          201: entryResponseSchema,
          400: z.object({ error: z.string() }),
          401: z.object({ message: z.string() }),
          500: z.object({ error: z.string() }),
        },
        security: [{ bearerAuth: [] }],
      },
      preHandler: [
        authMiddleware,
        performanceMiddleware(),
        rateLimitMiddlewares.create(),
      ],
    },
    entryController.store.bind(entryController),
  )

  // PUT /entries/:id - Atualizar transa√ß√£o
  app.put(
    '/entries/:id',
    {
      schema: {
        tags: ['üí∞ Transa√ß√µes'],
        summary: 'Atualizar Transa√ß√£o',
        description: 'Atualiza completamente uma transa√ß√£o existente.',
        params: idParamSchema,
        body: entryUpdateSchema,
        response: {
          200: entryResponseSchema,
          400: z.object({ error: z.string() }),
          401: z.object({ message: z.string() }),
          404: z.object({ error: z.string() }),
          500: z.object({ error: z.string() }),
        },
        security: [{ bearerAuth: [] }],
      },
      preHandler: [
        authMiddleware,
        performanceMiddleware(),
        rateLimitMiddlewares.authenticated(),
      ],
    },
    entryController.update.bind(entryController),
  )

  // PATCH /entries/:id - Atualizar transa√ß√£o parcialmente
  app.patch(
    '/entries/:id',
    {
      schema: {
        tags: ['üí∞ Transa√ß√µes'],
        summary: 'Atualizar Transa√ß√£o Parcialmente',
        description: 'Atualiza apenas os campos fornecidos de uma transa√ß√£o.',
        params: idParamSchema,
        body: entryPatchSchema,
        response: {
          200: entryResponseSchema,
          400: z.object({ error: z.string() }),
          401: z.object({ message: z.string() }),
          404: z.object({ error: z.string() }),
          500: z.object({ error: z.string() }),
        },
        security: [{ bearerAuth: [] }],
      },
      preHandler: [
        authMiddleware,
        performanceMiddleware(),
        rateLimitMiddlewares.authenticated(),
      ],
    },
    entryController.patch.bind(entryController),
  )

  // DELETE /entries/:id - Excluir transa√ß√£o
  app.delete(
    '/entries/:id',
    {
      schema: {
        tags: ['üí∞ Transa√ß√µes'],
        summary: 'Excluir Transa√ß√£o',
        description: 'Remove permanentemente uma transa√ß√£o.',
        params: idParamSchema,
        response: {
          204: z.null(),
          401: z.object({ message: z.string() }),
          404: z.object({ error: z.string() }),
          500: z.object({ error: z.string() }),
        },
        security: [{ bearerAuth: [] }],
      },
      preHandler: [
        authMiddleware,
        performanceMiddleware(),
        rateLimitMiddlewares.authenticated(),
      ],
    },
    entryController.destroy.bind(entryController),
  )

  // DELETE /entries/all - Excluir todas as entradas do usu√°rio
  app.delete(
    '/entries/all',
    {
      schema: {
        tags: ['üí∞ Transa√ß√µes'],
        summary: 'Excluir Todas as Entradas',
        description: `
Remove permanentemente todas as transa√ß√µes do usu√°rio autenticado.

**‚ö†Ô∏è ATEN√á√ÉO:** Esta opera√ß√£o √© irrevers√≠vel e excluir√° TODAS as transa√ß√µes do usu√°rio.
Use com cuidado e certifique-se de que o usu√°rio realmente deseja limpar todos os seus dados.

**Resposta:**
- 200: Entradas exclu√≠das com sucesso (inclui contagem)
- 400: Nenhuma entrada encontrada para excluir
- 401: N√£o autenticado
- 500: Erro interno
        `,
        response: {
          200: z.object({
            message: z.string(),
            deletedCount: z.number(),
          }),
          400: z.object({ error: z.string() }),
          401: z.object({ message: z.string() }),
          500: z.object({ error: z.string() }),
        },
        security: [{ bearerAuth: [] }],
      },
      preHandler: [
        authMiddleware,
        performanceMiddleware(),
        rateLimitMiddlewares.authenticated(),
      ],
    },
    entryController.deleteAll.bind(entryController),
  )
}
